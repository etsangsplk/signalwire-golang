// Code generated by MockGen. DO NOT EDIT.
// Source: event_dispatcher.go

// Package signalwire is a generated GoMock package.
package signalwire

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIEventCalling is a mock of IEventCalling interface
type MockIEventCalling struct {
	ctrl     *gomock.Controller
	recorder *MockIEventCallingMockRecorder
}

// MockIEventCallingMockRecorder is the mock recorder for MockIEventCalling
type MockIEventCallingMockRecorder struct {
	mock *MockIEventCalling
}

// NewMockIEventCalling creates a new mock instance
func NewMockIEventCalling(ctrl *gomock.Controller) *MockIEventCalling {
	mock := &MockIEventCalling{ctrl: ctrl}
	mock.recorder = &MockIEventCallingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventCalling) EXPECT() *MockIEventCallingMockRecorder {
	return m.recorder
}

// callingNotif mocks base method
func (m *MockIEventCalling) callingNotif(ctx context.Context, b NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callingNotif", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// callingNotif indicates an expected call of callingNotif
func (mr *MockIEventCallingMockRecorder) callingNotif(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callingNotif", reflect.TypeOf((*MockIEventCalling)(nil).callingNotif), ctx, b)
}

// callConnectStateFromStr mocks base method
func (m *MockIEventCalling) callConnectStateFromStr(s string) (CallConnectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callConnectStateFromStr", s)
	ret0, _ := ret[0].(CallConnectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callConnectStateFromStr indicates an expected call of callConnectStateFromStr
func (mr *MockIEventCallingMockRecorder) callConnectStateFromStr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callConnectStateFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callConnectStateFromStr), s)
}

// callStateFromStr mocks base method
func (m *MockIEventCalling) callStateFromStr(s string) (CallState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callStateFromStr", s)
	ret0, _ := ret[0].(CallState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callStateFromStr indicates an expected call of callStateFromStr
func (mr *MockIEventCallingMockRecorder) callStateFromStr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callStateFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callStateFromStr), s)
}

// callPlayStateFromStr mocks base method
func (m *MockIEventCalling) callPlayStateFromStr(s string) (PlayState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callPlayStateFromStr", s)
	ret0, _ := ret[0].(PlayState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callPlayStateFromStr indicates an expected call of callPlayStateFromStr
func (mr *MockIEventCallingMockRecorder) callPlayStateFromStr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callPlayStateFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callPlayStateFromStr), s)
}

// callRecordStateFromStr mocks base method
func (m *MockIEventCalling) callRecordStateFromStr(s string) (RecordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callRecordStateFromStr", s)
	ret0, _ := ret[0].(RecordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callRecordStateFromStr indicates an expected call of callRecordStateFromStr
func (mr *MockIEventCallingMockRecorder) callRecordStateFromStr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callRecordStateFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callRecordStateFromStr), s)
}

// callDetectEventFromStr mocks base method
func (m *MockIEventCalling) callDetectEventFromStr(event, detType string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callDetectEventFromStr", event, detType)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callDetectEventFromStr indicates an expected call of callDetectEventFromStr
func (mr *MockIEventCallingMockRecorder) callDetectEventFromStr(event, detType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callDetectEventFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callDetectEventFromStr), event, detType)
}

// callFaxEventFromStr mocks base method
func (m *MockIEventCalling) callFaxEventFromStr(t string) (FaxEventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "callFaxEventFromStr", t)
	ret0, _ := ret[0].(FaxEventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// callFaxEventFromStr indicates an expected call of callFaxEventFromStr
func (mr *MockIEventCallingMockRecorder) callFaxEventFromStr(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "callFaxEventFromStr", reflect.TypeOf((*MockIEventCalling)(nil).callFaxEventFromStr), t)
}

// dispatchStateNotif mocks base method
func (m *MockIEventCalling) dispatchStateNotif(ctx context.Context, callParams CallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchStateNotif", ctx, callParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchStateNotif indicates an expected call of dispatchStateNotif
func (mr *MockIEventCallingMockRecorder) dispatchStateNotif(ctx, callParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchStateNotif", reflect.TypeOf((*MockIEventCalling)(nil).dispatchStateNotif), ctx, callParams)
}

// dispatchConnectStateNotif mocks base method
func (m *MockIEventCalling) dispatchConnectStateNotif(ctx context.Context, callParams CallParams, peer PeerDeviceStruct, ccstate CallConnectState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchConnectStateNotif", ctx, callParams, peer, ccstate)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchConnectStateNotif indicates an expected call of dispatchConnectStateNotif
func (mr *MockIEventCallingMockRecorder) dispatchConnectStateNotif(ctx, callParams, peer, ccstate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchConnectStateNotif", reflect.TypeOf((*MockIEventCalling)(nil).dispatchConnectStateNotif), ctx, callParams, peer, ccstate)
}

// dispatchPlayState mocks base method
func (m *MockIEventCalling) dispatchPlayState(ctx context.Context, callID, ctrlID string, playState PlayState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchPlayState", ctx, callID, ctrlID, playState)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchPlayState indicates an expected call of dispatchPlayState
func (mr *MockIEventCallingMockRecorder) dispatchPlayState(ctx, callID, ctrlID, playState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchPlayState", reflect.TypeOf((*MockIEventCalling)(nil).dispatchPlayState), ctx, callID, ctrlID, playState)
}

// dispatchRecordState mocks base method
func (m *MockIEventCalling) dispatchRecordState(ctx context.Context, callID, ctrlID string, recordState RecordState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchRecordState", ctx, callID, ctrlID, recordState)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchRecordState indicates an expected call of dispatchRecordState
func (mr *MockIEventCallingMockRecorder) dispatchRecordState(ctx, callID, ctrlID, recordState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchRecordState", reflect.TypeOf((*MockIEventCalling)(nil).dispatchRecordState), ctx, callID, ctrlID, recordState)
}

// dispatchRecordEventParams mocks base method
func (m *MockIEventCalling) dispatchRecordEventParams(ctx context.Context, callID, ctrlID string, params ParamsEventCallingCallRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchRecordEventParams", ctx, callID, ctrlID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchRecordEventParams indicates an expected call of dispatchRecordEventParams
func (mr *MockIEventCallingMockRecorder) dispatchRecordEventParams(ctx, callID, ctrlID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchRecordEventParams", reflect.TypeOf((*MockIEventCalling)(nil).dispatchRecordEventParams), ctx, callID, ctrlID, params)
}

// dispatchDetect mocks base method
func (m *MockIEventCalling) dispatchDetect(ctx context.Context, callID, ctrlID string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchDetect", ctx, callID, ctrlID, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchDetect indicates an expected call of dispatchDetect
func (mr *MockIEventCallingMockRecorder) dispatchDetect(ctx, callID, ctrlID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchDetect", reflect.TypeOf((*MockIEventCalling)(nil).dispatchDetect), ctx, callID, ctrlID, v)
}

// dispatchFax mocks base method
func (m *MockIEventCalling) dispatchFax(ctx context.Context, callID, ctrlID string, faxType FaxEventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchFax", ctx, callID, ctrlID, faxType)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchFax indicates an expected call of dispatchFax
func (mr *MockIEventCallingMockRecorder) dispatchFax(ctx, callID, ctrlID, faxType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchFax", reflect.TypeOf((*MockIEventCalling)(nil).dispatchFax), ctx, callID, ctrlID, faxType)
}

// dispatchFaxEventParams mocks base method
func (m *MockIEventCalling) dispatchFaxEventParams(ctx context.Context, callID, ctrlID string, params ParamsEventCallingFax) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchFaxEventParams", ctx, callID, ctrlID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchFaxEventParams indicates an expected call of dispatchFaxEventParams
func (mr *MockIEventCallingMockRecorder) dispatchFaxEventParams(ctx, callID, ctrlID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchFaxEventParams", reflect.TypeOf((*MockIEventCalling)(nil).dispatchFaxEventParams), ctx, callID, ctrlID, params)
}

// getCall mocks base method
func (m *MockIEventCalling) getCall(ctx context.Context, tag, callID string) (*CallSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCall", ctx, tag, callID)
	ret0, _ := ret[0].(*CallSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCall indicates an expected call of getCall
func (mr *MockIEventCallingMockRecorder) getCall(ctx, tag, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCall", reflect.TypeOf((*MockIEventCalling)(nil).getCall), ctx, tag, callID)
}

// getBroadcastParams mocks base method
func (m *MockIEventCalling) getBroadcastParams(ctx context.Context, in, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBroadcastParams", ctx, in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// getBroadcastParams indicates an expected call of getBroadcastParams
func (mr *MockIEventCallingMockRecorder) getBroadcastParams(ctx, in, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBroadcastParams", reflect.TypeOf((*MockIEventCalling)(nil).getBroadcastParams), ctx, in, out)
}

// onCallingEventConnect mocks base method
func (m *MockIEventCalling) onCallingEventConnect(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventConnect", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventConnect indicates an expected call of onCallingEventConnect
func (mr *MockIEventCallingMockRecorder) onCallingEventConnect(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventConnect", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventConnect), ctx, broadcast)
}

// onCallingEventReceive mocks base method
func (m *MockIEventCalling) onCallingEventReceive(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventReceive", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventReceive indicates an expected call of onCallingEventReceive
func (mr *MockIEventCallingMockRecorder) onCallingEventReceive(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventReceive", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventReceive), ctx, broadcast)
}

// onCallingEventState mocks base method
func (m *MockIEventCalling) onCallingEventState(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventState", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventState indicates an expected call of onCallingEventState
func (mr *MockIEventCallingMockRecorder) onCallingEventState(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventState", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventState), ctx, broadcast)
}

// onCallingEventPlay mocks base method
func (m *MockIEventCalling) onCallingEventPlay(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventPlay", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventPlay indicates an expected call of onCallingEventPlay
func (mr *MockIEventCallingMockRecorder) onCallingEventPlay(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventPlay", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventPlay), ctx, broadcast)
}

// onCallingEventCollect mocks base method
func (m *MockIEventCalling) onCallingEventCollect(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventCollect", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventCollect indicates an expected call of onCallingEventCollect
func (mr *MockIEventCallingMockRecorder) onCallingEventCollect(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventCollect", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventCollect), ctx, broadcast)
}

// onCallingEventRecord mocks base method
func (m *MockIEventCalling) onCallingEventRecord(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventRecord", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventRecord indicates an expected call of onCallingEventRecord
func (mr *MockIEventCallingMockRecorder) onCallingEventRecord(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventRecord", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventRecord), ctx, broadcast)
}

// onCallingEventTap mocks base method
func (m *MockIEventCalling) onCallingEventTap(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventTap", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventTap indicates an expected call of onCallingEventTap
func (mr *MockIEventCallingMockRecorder) onCallingEventTap(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventTap", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventTap), ctx, broadcast)
}

// onCallingEventDetect mocks base method
func (m *MockIEventCalling) onCallingEventDetect(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventDetect", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventDetect indicates an expected call of onCallingEventDetect
func (mr *MockIEventCallingMockRecorder) onCallingEventDetect(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventDetect", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventDetect), ctx, broadcast)
}

// onCallingEventFax mocks base method
func (m *MockIEventCalling) onCallingEventFax(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventFax", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventFax indicates an expected call of onCallingEventFax
func (mr *MockIEventCallingMockRecorder) onCallingEventFax(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventFax", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventFax), ctx, broadcast)
}

// onCallingEventSendDigits mocks base method
func (m *MockIEventCalling) onCallingEventSendDigits(ctx context.Context, broadcast NotifParamsBladeBroadcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onCallingEventSendDigits", ctx, broadcast)
	ret0, _ := ret[0].(error)
	return ret0
}

// onCallingEventSendDigits indicates an expected call of onCallingEventSendDigits
func (mr *MockIEventCallingMockRecorder) onCallingEventSendDigits(ctx, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onCallingEventSendDigits", reflect.TypeOf((*MockIEventCalling)(nil).onCallingEventSendDigits), ctx, broadcast)
}
