// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package signalwire is a generated GoMock package.
package signalwire

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockIClientSession is a mock of IClientSession interface
type MockIClientSession struct {
	ctrl     *gomock.Controller
	recorder *MockIClientSessionMockRecorder
}

// MockIClientSessionMockRecorder is the mock recorder for MockIClientSession
type MockIClientSessionMockRecorder struct {
	mock *MockIClientSession
}

// NewMockIClientSession creates a new mock instance
func NewMockIClientSession(ctrl *gomock.Controller) *MockIClientSession {
	mock := &MockIClientSession{ctrl: ctrl}
	mock.recorder = &MockIClientSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIClientSession) EXPECT() *MockIClientSessionMockRecorder {
	return m.recorder
}

// setAuth mocks base method
func (m *MockIClientSession) setAuth(project, token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setAuth", project, token)
}

// setAuth indicates an expected call of setAuth
func (mr *MockIClientSessionMockRecorder) setAuth(project, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setAuth", reflect.TypeOf((*MockIClientSession)(nil).setAuth), project, token)
}

// setClient mocks base method
func (m *MockIClientSession) setClient(host string, contexts []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setClient", host, contexts)
}

// setClient indicates an expected call of setClient
func (mr *MockIClientSessionMockRecorder) setClient(host, contexts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setClient", reflect.TypeOf((*MockIClientSession)(nil).setClient), host, contexts)
}

// connectInternal mocks base method
func (m *MockIClientSession) connectInternal(ctx context.Context, cancel context.CancelFunc, runWG *sync.WaitGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connectInternal", ctx, cancel, runWG)
	ret0, _ := ret[0].(error)
	return ret0
}

// connectInternal indicates an expected call of connectInternal
func (mr *MockIClientSessionMockRecorder) connectInternal(ctx, cancel, runWG interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connectInternal", reflect.TypeOf((*MockIClientSession)(nil).connectInternal), ctx, cancel, runWG)
}

// disconnectInternal mocks base method
func (m *MockIClientSession) disconnectInternal() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disconnectInternal")
	ret0, _ := ret[0].(error)
	return ret0
}

// disconnectInternal indicates an expected call of disconnectInternal
func (mr *MockIClientSessionMockRecorder) disconnectInternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disconnectInternal", reflect.TypeOf((*MockIClientSession)(nil).disconnectInternal))
}

// setupInbound mocks base method
func (m *MockIClientSession) setupInbound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setupInbound")
}

// setupInbound indicates an expected call of setupInbound
func (mr *MockIClientSessionMockRecorder) setupInbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setupInbound", reflect.TypeOf((*MockIClientSession)(nil).setupInbound))
}

// waitInbound mocks base method
func (m *MockIClientSession) waitInbound(ctx context.Context) (*CallSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "waitInbound", ctx)
	ret0, _ := ret[0].(*CallSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// waitInbound indicates an expected call of waitInbound
func (mr *MockIClientSessionMockRecorder) waitInbound(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "waitInbound", reflect.TypeOf((*MockIClientSession)(nil).waitInbound), ctx)
}

// waitInboundMsg mocks base method
func (m *MockIClientSession) waitInboundMsg(ctx context.Context) (*MsgSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "waitInboundMsg", ctx)
	ret0, _ := ret[0].(*MsgSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// waitInboundMsg indicates an expected call of waitInboundMsg
func (mr *MockIClientSessionMockRecorder) waitInboundMsg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "waitInboundMsg", reflect.TypeOf((*MockIClientSession)(nil).waitInboundMsg), ctx)
}
