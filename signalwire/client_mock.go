// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package signalwire is a generated GoMock package.
package signalwire

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockIClientSession is a mock of IClientSession interface
type MockIClientSession struct {
	ctrl     *gomock.Controller
	recorder *MockIClientSessionMockRecorder
}

// MockIClientSessionMockRecorder is the mock recorder for MockIClientSession
type MockIClientSessionMockRecorder struct {
	mock *MockIClientSession
}

// NewMockIClientSession creates a new mock instance
func NewMockIClientSession(ctrl *gomock.Controller) *MockIClientSession {
	mock := &MockIClientSession{ctrl: ctrl}
	mock.recorder = &MockIClientSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIClientSession) EXPECT() *MockIClientSessionMockRecorder {
	return m.recorder
}

// SetAuth mocks base method
func (m *MockIClientSession) SetAuth(project, token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuth", project, token)
}

// SetAuth indicates an expected call of SetAuth
func (mr *MockIClientSessionMockRecorder) SetAuth(project, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuth", reflect.TypeOf((*MockIClientSession)(nil).SetAuth), project, token)
}

// SetClient mocks base method
func (m *MockIClientSession) SetClient(host string, contexts []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", host, contexts)
}

// SetClient indicates an expected call of SetClient
func (mr *MockIClientSessionMockRecorder) SetClient(host, contexts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockIClientSession)(nil).SetClient), host, contexts)
}

// Connect mocks base method
func (m *MockIClientSession) Connect(ctx context.Context, cancel context.CancelFunc, runWG *sync.WaitGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, cancel, runWG)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockIClientSessionMockRecorder) Connect(ctx, cancel, runWG interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIClientSession)(nil).Connect), ctx, cancel, runWG)
}

// Disconnect mocks base method
func (m *MockIClientSession) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockIClientSessionMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIClientSession)(nil).Disconnect))
}

// SetupInbound mocks base method
func (m *MockIClientSession) SetupInbound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupInbound")
}

// SetupInbound indicates an expected call of SetupInbound
func (mr *MockIClientSessionMockRecorder) SetupInbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupInbound", reflect.TypeOf((*MockIClientSession)(nil).SetupInbound))
}

// WaitInbound mocks base method
func (m *MockIClientSession) WaitInbound() (*CallSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitInbound")
	ret0, _ := ret[0].(*CallSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitInbound indicates an expected call of WaitInbound
func (mr *MockIClientSessionMockRecorder) WaitInbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitInbound", reflect.TypeOf((*MockIClientSession)(nil).WaitInbound))
}

// OnReady mocks base method
func (m *MockIClientSession) OnReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReady")
}

// OnReady indicates an expected call of OnReady
func (mr *MockIClientSessionMockRecorder) OnReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReady", reflect.TypeOf((*MockIClientSession)(nil).OnReady))
}

// OnDisconnected mocks base method
func (m *MockIClientSession) OnDisconnected() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDisconnected")
}

// OnDisconnected indicates an expected call of OnDisconnected
func (mr *MockIClientSessionMockRecorder) OnDisconnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDisconnected", reflect.TypeOf((*MockIClientSession)(nil).OnDisconnected))
}
