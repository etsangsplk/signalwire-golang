// Code generated by MockGen. DO NOT EDIT.
// Source: call.go

// Package signalwire is a generated GoMock package.
package signalwire

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICall is a mock of ICall interface
type MockICall struct {
	ctrl     *gomock.Controller
	recorder *MockICallMockRecorder
}

// MockICallMockRecorder is the mock recorder for MockICall
type MockICallMockRecorder struct {
	mock *MockICall
}

// NewMockICall creates a new mock instance
func NewMockICall(ctrl *gomock.Controller) *MockICall {
	mock := &MockICall{ctrl: ctrl}
	mock.recorder = &MockICallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICall) EXPECT() *MockICallMockRecorder {
	return m.recorder
}

// CallInit mocks base method
func (m *MockICall) CallInit(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallInit", ctx)
}

// CallInit indicates an expected call of CallInit
func (mr *MockICallMockRecorder) CallInit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallInit", reflect.TypeOf((*MockICall)(nil).CallInit), ctx)
}

// CallCleanup mocks base method
func (m *MockICall) CallCleanup(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallCleanup", ctx)
}

// CallCleanup indicates an expected call of CallCleanup
func (mr *MockICallMockRecorder) CallCleanup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCleanup", reflect.TypeOf((*MockICall)(nil).CallCleanup), ctx)
}

// UpdateCallState mocks base method
func (m *MockICall) UpdateCallState(s CallState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCallState", s)
}

// UpdateCallState indicates an expected call of UpdateCallState
func (mr *MockICallMockRecorder) UpdateCallState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCallState", reflect.TypeOf((*MockICall)(nil).UpdateCallState), s)
}

// UpdateCallConnectState mocks base method
func (m *MockICall) UpdateCallConnectState(s CallConnectState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCallConnectState", s)
}

// UpdateCallConnectState indicates an expected call of UpdateCallConnectState
func (mr *MockICallMockRecorder) UpdateCallConnectState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCallConnectState", reflect.TypeOf((*MockICall)(nil).UpdateCallConnectState), s)
}

// UpdateConnectPeer mocks base method
func (m *MockICall) UpdateConnectPeer(p PeerDeviceStruct) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateConnectPeer", p)
}

// UpdateConnectPeer indicates an expected call of UpdateConnectPeer
func (mr *MockICallMockRecorder) UpdateConnectPeer(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectPeer", reflect.TypeOf((*MockICall)(nil).UpdateConnectPeer), p)
}

// WaitCallState mocks base method
func (m *MockICall) WaitCallState(ctx context.Context, want CallState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCallState", ctx, want)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitCallState indicates an expected call of WaitCallState
func (mr *MockICallMockRecorder) WaitCallState(ctx, want interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCallState", reflect.TypeOf((*MockICall)(nil).WaitCallState), ctx, want)
}

// WaitCallConnectState mocks base method
func (m *MockICall) WaitCallConnectState(ctx context.Context, want CallConnectState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCallConnectState", ctx, want)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitCallConnectState indicates an expected call of WaitCallConnectState
func (mr *MockICallMockRecorder) WaitCallConnectState(ctx, want interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCallConnectState", reflect.TypeOf((*MockICall)(nil).WaitCallConnectState), ctx, want)
}

// WaitPlayState mocks base method
func (m *MockICall) WaitPlayState(ctx context.Context, ctrlID string, want PlayState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitPlayState", ctx, ctrlID, want)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitPlayState indicates an expected call of WaitPlayState
func (mr *MockICallMockRecorder) WaitPlayState(ctx, ctrlID, want interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitPlayState", reflect.TypeOf((*MockICall)(nil).WaitPlayState), ctx, ctrlID, want)
}

// WaitRecordState mocks base method
func (m *MockICall) WaitRecordState(ctx context.Context, ctrlID string, want RecordState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitRecordState", ctx, ctrlID, want)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitRecordState indicates an expected call of WaitRecordState
func (mr *MockICallMockRecorder) WaitRecordState(ctx, ctrlID, want interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitRecordState", reflect.TypeOf((*MockICall)(nil).WaitRecordState), ctx, ctrlID, want)
}

// GetPeer mocks base method
func (m *MockICall) GetPeer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPeer", ctx)
}

// GetPeer indicates an expected call of GetPeer
func (mr *MockICallMockRecorder) GetPeer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeer", reflect.TypeOf((*MockICall)(nil).GetPeer), ctx)
}

// MockITagToCallID is a mock of ITagToCallID interface
type MockITagToCallID struct {
	ctrl     *gomock.Controller
	recorder *MockITagToCallIDMockRecorder
}

// MockITagToCallIDMockRecorder is the mock recorder for MockITagToCallID
type MockITagToCallIDMockRecorder struct {
	mock *MockITagToCallID
}

// NewMockITagToCallID creates a new mock instance
func NewMockITagToCallID(ctrl *gomock.Controller) *MockITagToCallID {
	mock := &MockITagToCallID{ctrl: ctrl}
	mock.recorder = &MockITagToCallIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITagToCallID) EXPECT() *MockITagToCallIDMockRecorder {
	return m.recorder
}

// addCallID mocks base method
func (m *MockITagToCallID) addCallID(tag, callID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addCallID", tag, callID)
}

// addCallID indicates an expected call of addCallID
func (mr *MockITagToCallIDMockRecorder) addCallID(tag, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addCallID", reflect.TypeOf((*MockITagToCallID)(nil).addCallID), tag, callID)
}

// getCallID mocks base method
func (m *MockITagToCallID) getCallID(tag string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCallID", tag)
	ret0, _ := ret[0].(string)
	return ret0
}

// getCallID indicates an expected call of getCallID
func (mr *MockITagToCallIDMockRecorder) getCallID(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCallID", reflect.TypeOf((*MockITagToCallID)(nil).getCallID), tag)
}

// removeCallID mocks base method
func (m *MockITagToCallID) removeCallID(tag string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "removeCallID", tag)
}

// removeCallID indicates an expected call of removeCallID
func (mr *MockITagToCallIDMockRecorder) removeCallID(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeCallID", reflect.TypeOf((*MockITagToCallID)(nil).removeCallID), tag)
}
