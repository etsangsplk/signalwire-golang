// Code generated by MockGen. DO NOT EDIT.
// Source: relay_calling.go

// Package signalwire is a generated GoMock package.
package signalwire

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRelay is a mock of IRelay interface
type MockIRelay struct {
	ctrl     *gomock.Controller
	recorder *MockIRelayMockRecorder
}

// MockIRelayMockRecorder is the mock recorder for MockIRelay
type MockIRelayMockRecorder struct {
	mock *MockIRelay
}

// NewMockIRelay creates a new mock instance
func NewMockIRelay(ctrl *gomock.Controller) *MockIRelay {
	mock := &MockIRelay{ctrl: ctrl}
	mock.recorder = &MockIRelayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRelay) EXPECT() *MockIRelayMockRecorder {
	return m.recorder
}

// RelayPhoneDial mocks base method
func (m *MockIRelay) RelayPhoneDial(ctx context.Context, call *CallSession, fromNumber, toNumber string, timeout uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayPhoneDial", ctx, call, fromNumber, toNumber, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayPhoneDial indicates an expected call of RelayPhoneDial
func (mr *MockIRelayMockRecorder) RelayPhoneDial(ctx, call, fromNumber, toNumber, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayPhoneDial", reflect.TypeOf((*MockIRelay)(nil).RelayPhoneDial), ctx, call, fromNumber, toNumber, timeout)
}

// RelayPhoneConnect mocks base method
func (m *MockIRelay) RelayPhoneConnect(ctx context.Context, call *CallSession, fromNumber, toNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayPhoneConnect", ctx, call, fromNumber, toNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayPhoneConnect indicates an expected call of RelayPhoneConnect
func (mr *MockIRelayMockRecorder) RelayPhoneConnect(ctx, call, fromNumber, toNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayPhoneConnect", reflect.TypeOf((*MockIRelay)(nil).RelayPhoneConnect), ctx, call, fromNumber, toNumber)
}

// RelayCallEnd mocks base method
func (m *MockIRelay) RelayCallEnd(ctx context.Context, call *CallSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayCallEnd", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayCallEnd indicates an expected call of RelayCallEnd
func (mr *MockIRelayMockRecorder) RelayCallEnd(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayCallEnd", reflect.TypeOf((*MockIRelay)(nil).RelayCallEnd), ctx, call)
}

// RelayStop mocks base method
func (m *MockIRelay) RelayStop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayStop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayStop indicates an expected call of RelayStop
func (mr *MockIRelayMockRecorder) RelayStop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayStop", reflect.TypeOf((*MockIRelay)(nil).RelayStop), ctx)
}

// RelayOnInboundAnswer mocks base method
func (m *MockIRelay) RelayOnInboundAnswer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RelayOnInboundAnswer", ctx)
}

// RelayOnInboundAnswer indicates an expected call of RelayOnInboundAnswer
func (mr *MockIRelayMockRecorder) RelayOnInboundAnswer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayOnInboundAnswer", reflect.TypeOf((*MockIRelay)(nil).RelayOnInboundAnswer), ctx)
}

// RelayPlayAudio mocks base method
func (m *MockIRelay) RelayPlayAudio(ctx context.Context, call *CallSession, ctrlID, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayPlayAudio", ctx, call, ctrlID, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayPlayAudio indicates an expected call of RelayPlayAudio
func (mr *MockIRelayMockRecorder) RelayPlayAudio(ctx, call, ctrlID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayPlayAudio", reflect.TypeOf((*MockIRelay)(nil).RelayPlayAudio), ctx, call, ctrlID, url)
}

// RelayPlayAudioStop mocks base method
func (m *MockIRelay) RelayPlayAudioStop(ctx context.Context, call *CallSession, ctrlID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayPlayAudioStop", ctx, call, ctrlID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayPlayAudioStop indicates an expected call of RelayPlayAudioStop
func (mr *MockIRelayMockRecorder) RelayPlayAudioStop(ctx, call, ctrlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayPlayAudioStop", reflect.TypeOf((*MockIRelay)(nil).RelayPlayAudioStop), ctx, call, ctrlID)
}

// RelayRecordAudio mocks base method
func (m *MockIRelay) RelayRecordAudio(ctx context.Context, call *CallSession, ctrlID string, rec RecordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayRecordAudio", ctx, call, ctrlID, rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayRecordAudio indicates an expected call of RelayRecordAudio
func (mr *MockIRelayMockRecorder) RelayRecordAudio(ctx, call, ctrlID, rec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayRecordAudio", reflect.TypeOf((*MockIRelay)(nil).RelayRecordAudio), ctx, call, ctrlID, rec)
}

// RelayRecordAudioStop mocks base method
func (m *MockIRelay) RelayRecordAudioStop(ctx context.Context, call *CallSession, ctrlID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayRecordAudioStop", ctx, call, ctrlID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayRecordAudioStop indicates an expected call of RelayRecordAudioStop
func (mr *MockIRelayMockRecorder) RelayRecordAudioStop(ctx, call, ctrlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayRecordAudioStop", reflect.TypeOf((*MockIRelay)(nil).RelayRecordAudioStop), ctx, call, ctrlID)
}
